# Criação de ambiente virtual e criação de projeto Django dentro desse ambiente:

Utilizando o VS Code:

Aqui está um guia básico para criar e usar um ambiente virtual com Django:
  1. Instalar o virtualenv: Se ainda não tiver o virtualenv instalado, você pode instalá-lo usando pip:

    sh
    pip install virtualenv
	
	2. Criar um Ambiente Virtual: Navegue até o diretório (importante) onde deseja criar o ambiente virtual e execute:
  Usar um ambiente virtual ajuda a evitar conflitos de dependências e mantém seu ambiente de desenvolvimento limpo e organizado.

    sh
    virtualenv venv

Aqui, venv é o nome do ambiente virtual. Você pode nomeá-lo como preferir.
	3. Ativar o Ambiente Virtual:
		○ No Windows:

      sh
      venv\Scripts\activate
		
		○ No macOS/Linux:

      sh
      source venv/bin/activate

Após ativar, você verá o nome do ambiente virtual no início do prompt do terminal, indicando que o ambiente está ativo.
		
	4. Instalar o Django: Com o ambiente virtual ativo, você pode instalar o Django:

    sh
    pip install django
	
	5. Criar um Projeto Django: Depois de instalar o Django, você pode criar um novo projeto Django:

    sh
    django-admin startproject myproject
	
	Ou
	
	  django-admin startproject myproject .
	
	Substitua myproject pelo nome do seu projeto. O ponto na segunda opção, faz com que a criação do projeto seja no mesmo diretório, 
  reduz o número de sub diretórios: dentro do diretório principal ficam -> manage.py + pasta projeto com seus respectivos arquivos.

	6. Trabalhar no Projeto: Com o ambiente virtual ativo, você pode trabalhar no seu projeto Django. Todos os pacotes instalados (como Django e suas dependências) estarão contidos dentro desse ambiente virtual.

	7. Desativar o Ambiente Virtual: Quando terminar de trabalhar, você pode desativar o ambiente virtual com o comando:

    sh
    Deactivate
  
  8. Para voltar a trabalhar no projeto basta ativa-lo novamente com o mesmo comando de ativação, dentro do diretório do projeto execute:

    sh
    source venv/bin/activate
	
  9. Criar uma nova aplicação dentro de um projeto Django:  Cada aplicação dentro de um projeto Django é utilizada para modularizar e organizar o código, dando propósitos diferentes para cada aplicação.
	Exemplo de aplicações dentro de um projeto: sistema de autenticação, um blog, uma loja, etc.
	Estrutura de um Projeto Django
	Um projeto Django pode conter várias aplicações, e a estrutura básica de um projeto Django pode parecer assim:
	
    meu_projeto/
        manage.py
        meu_projeto/
            __init__.py
            settings.py
            urls.py
            wsgi.py
        app1/
        app2/
        ...
	Comando para criação de uma nova aplicação dentro do projeto Django:
	
    sh
    django-admin startapp nomeAplicacao
	
	A estrutura básica de uma nova aplicação Django criada com este comando será:
	
    meu_projeto/
        manage.py
        meu_projeto/
            __init__.py
            settings.py
            urls.py
            wsgi.py
        nomeAplicacao/
            __init__.py
            admin.py
            apps.py
            migrations/
                __init__.py
            models.py
            tests.py
          views.py
  
  	Explicação dos Arquivos Criados
		• __init__.py: Indica que este diretório deve ser tratado como um pacote Python.
		• admin.py: Arquivo onde você pode registrar os modelos para serem gerenciados pela interface de administração do Django.
		• apps.py: Configurações específicas da aplicação.
		• migrations/: Diretório onde ficarão os arquivos de migração do banco de dados.
		• models.py: Arquivo onde você define os modelos (estruturas de banco de dados) da sua aplicação.
		• tests.py: Arquivo onde você pode escrever testes para sua aplicação.
    • views.py: Arquivo onde você define as views (lógica de apresentação) da sua aplicação.

  10. Após criar a aplicação, adicionar a aplicação ao "settings.py" do projeto:

  Exemplo (core: aplicação adicionada):
  INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

  11. Informar onde o Django deve procurar por templates:

  Exemplo do código:

  TEMPLATES = [
      {
          'BACKEND': 'django.template.backends.django.DjangoTemplates',
          # Informar o diretório onde o Django irá procurar por templates
          'DIRS': ['templates'],
          'APP_DIRS': True,
          'OPTIONS': {
              'context_processors': [
                  'django.template.context_processors.debug',
                  'django.template.context_processors.request',
                  'django.contrib.auth.context_processors.auth',
                  'django.contrib.messages.context_processors.messages',
              ],
          },
      },
  ]
	
  Resumo da Configuração TEMPLATES dentro do "settings.py":
    • 'BACKEND': 'django.template.backends.django.DjangoTemplates':
      ○ Especifica o uso do backend padrão de templates do Django.
    • 'DIRS': ['templates']:
      ○ Diz ao Django para procurar por templates dentro do diretório templates na raiz do projeto.
    • APP_DIRS: True:
      ○ Diz ao Django para procurar por templates dentro de um diretório templates em cada aplicação instalada.
    • context_processors:
      ○ Funções que adicionam dados ao contexto dos templates, facilitando o acesso a informações comuns (como dados do usuário ou mensagens) em todos os templates.
      
    - Explicação sobre templates em Django:
    Em Django, templates são arquivos que definem a estrutura ou layout da página HTML que será retornada ao usuário. Eles são utilizados para gerar dinamicamente conteúdo HTML baseado nos dados fornecidos pelas views do Django.
    - O Que São Templates no Django?
    Templates são geralmente arquivos HTML com placeholders para conteúdo dinâmico. Esses placeholders são preenchidos com dados do servidor quando a página é renderizada. O Django usa um sistema de templates que permite combinar HTML estático com variáveis e lógica de controle (como loops e condicionais) para gerar páginas HTML dinâmicas.
    - Como Funcionam os Templates?
  Quando uma view no Django precisa retornar uma resposta HTML, ela usa um template. A view passa dados para o template e o sistema de templates do Django combina esses dados com o HTML do template para gerar a resposta final.




# Comando para gerar as dependências atuais usadas:
pip freeze > requirements.txt

Exemplo do conteúdo do arquivo requirements.txt gerado:

asgiref==3.8.1
Django==5.0.6
sqlparse==0.5.0
typing_extensions==4.12.2